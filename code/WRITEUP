Title:  Writeup for Project 3, Fall/Spring 2015
Date:	11/08/2015
Group:	Aditya Radhakrishna radh439@usc.edu
		Kyle Vaidyanathan kvaidyan@usc.edu
 
I. Requirements:
	Part 1: Our implementation is required to handle TLB misses as Page Fault Exceptions and correctly do address translation to update an entry in the TLB (using FIFO replacement) with the correct translation for the needed virtual address. 

	Part 2: In addition to using the TLB, in part 2 we extend the memory management to use demand paged virtual memory. When a new process is created, nothing is actually loaded into memory. When a page is needed it is loaded into main memory and when memory is full a page is evicted. Evicted pages that are dirty are written to and loaded from a swap file. The page replacement policy can be either random using -P RAND or first in first out -P FIFO (default is FIFO).  

	Part 3:  Implement RPC Lock, Condition, and Monitor and syscalls. Instead of deleteing the non rpc syscalls, we created new Syscalls called CreateLockRPC, DestroyLockRPC, AcquireLockRPC, ReleaseLockRPC, etc. for conditions and monitor variables. These remote procedure calls send messages to a server nachos that parses the request and has the tables of locks, conditions, and monitor variables. 

II. Assumptions:
	We assume the following maximums for the Nachos OS capabilities:
		Each process may have  up to 100 threads (100 stacks).
		The machine is set to have a TLB with 4 entries and 32 physical pages of memory.
		Nachos can simultaneously have 420 locks and 420 conditions, and will print an error and return -1 if it reaches it's limit.
	We assume the user programs are aware if they want to use RPC to a server syscalls instead of regular syscalls. This allows the previous user programs to be run without a server nachos.
	
		
III. Design:
	Our design for demand paged virtual memory is based on the logic and organization described in lecture. On a PageFaultException the inverse page table is first searched sequentially for a page in memory with the matching virtual page and address space. If it is not found, then each address space has it’s own page table that keeps track of where all its virtual pages are, whether that is in main memory, in the executable, in the swap file, or nowhere. The needed page is loaded into memory and the page table, IPT, and TLB are all updated appropriately. Lastly, there is an extra step needed when the main memory is full. Using either a random or FIFO policy, a page in main memory is chosen to be evicted. When this happens the evicted page is searched for in the TLB for changes (indicated by a dirty bit) and invalidated. If the page is dirty, then it is written to a swap file, and it’s location is updated in address space’s page table. 
	Our design for RPCs use a server loop that parses messages and responds to them one at a time. User programs can call monitor, condition, or lock syscalls with RPC at the end such as BroadcastRPC to send a RPC call to the server.


IV. Implementation:
	+ Files Modified
		syscall.h - Added Create Get Set and Destroy RPC monitor syscalls

		userprog/exception.cc - 
Added PageFaultException handling (described below in functions added/modified)
	Added RPC versions of lock and condition syscalls as well as monitor RPC calls
		
		userprog/addrspace.cc and addrspace.h - Virtual memory, nothing preloaded from executable. Constructor now takes a file name and opens the executable itself

		threads/system.cc and system.h - Added data structures for dema

		test/Makefile - Added compile lines for making all user programs
		Makefile.common - Added compile lines to include iptentry.h and ptentry.h
		
		machine/machine.h - Decreased NumPhysPages to 32	

	+ Files added 
		
		test/2matmult.c - Test program that forks two threads that each execute matmult.
		test/iptentry.h - defines IPTEntry class, see below for description
		test/ptentry.h - defines PTEntry class, see below for description

		network/server.cc - Nachos server code implemented here

	+ Data Structures added, and the file they were added to.
		system.h/.cc - 
IPTEntry* ipt - inversed page table that stores IPTEntries, indexed by physical page. Created to be the same size as NumPhysPages
OpenFile* swapFile - open file pointer to the swap file that is opened on launch and closed when nachos quits. 
int* pageIndices and List* pageQueue - List of integers that are used as a queue of physical pages in memory that were loaded in. This is used for FIFO page replacement. Uses an array of integers the size of NumPhysPages so that the List data structure could use int pointers instead of ints. (List works only with pointers not primitives).

		iptentry.h - defines IPTEntry class,  which inherits from TranslationEntry and adds a space pointer so that the IPT can differentiate between the same virtual page number from different processes.

ptentry.h - defines PTEntry class, which inherits from TranslationEntry and adds booleans that indicate whether the page is currently in memory, on disk in the swap file, in the executable. It also stores a byte offset for the location of the page if it is in the executable or in the swapfile.

server.cc
	ServerLock - struct that holds the data for a server lock such as the owner and the queue of waiting clients. This does not actually contain a lock variable because the server should never go to sleep while interacting with locks. Identified by a name.
	ServerCondition - struct that holds the data for the server condition variable. Identified by a name.
	ServerMonitor - struct that holds an integer monitor variable and its name identifier.
		
	+ Data Structures modified, and the file they were in
		addrspace.h/.cc - Page table is now an array of PTEntry instead of TranslationEntry
	+ Functions added and in which file.
		syscall.h
	New syscalls for user programs:
			CreateLockRPC, DestroyLockRPC, AcquireRPC, ReleaseRPC, 
			CreateConditionRPC, DestroyConditionRPC, SignaRPC, WaitRPC, BroadcastRPC, CreateMonitorRPC, DestroyMonitorRPC, GetMonitorRPC, SetMonitorRPC

		exception.cc
HandlePageFault(int vaddr) - takes a virtual address that is needed and does all the work to load the needed page into memory. If the page is not in the IPT it calls HandleIPTMiss
HandleIPTMiss(int vpn) - takes a virtual address that needs to be moved into physical memory. It looks up the page in the current address space page table and loads it in. If there is no available space in main memory it will call HandleFullMemory.
int HandleFullMemory() - Chooses a page to evict from main memory either randomly or with FIFO policy and updates the TLB, IPT, and page table to reflect the changes. If the page is marked dirty in the IPT or TLB then it is saved to disk.	
CreateMonitorRPC_Syscall, DestroyMonitorRPC_Syscall, GetMonitorRPC_Syscall, SetMonitoRPC_Syscall - Handles new syscalls for user programs to create a shared monitor variable, set and get its value, and destroy it. Sends message to the server through the post office.


server.cc
	Server() Constructor - initializes variables and then goes into infinite loop of waiting for messages from clients and processing them

	ProcessMessage(char* message) - Takes a message and parses the request type then calls the appropriate server function for locks, conditions, and monitors.
	ServerCreateLock, ServerAcquireLock, ServerReleaseLock, ServerDestroyLock - Functions that handle lock functions from clients on server managed lock variables. The function processes the request, then generates and sends a response back to the client.

	ServerCreateCondition, ServerSignalCondition, ServerWaitCondition, ServerBroadcastCondition, ServerDestroyCondition - Functions that handle condition functions from clients on server managed condition variables. The function processes the request, then generates and sends a response back to the client.

	ServerCreateMonitor, ServerSetMonitor, ServerGetMonitor, ServerDestroyMonitor - Functions that parse requests for access to server managed monitor variables. 





	+ Functions modified and in which file.
addrspace.cc
Constructor -  Now takes filename parameter and opens the executable but nothing is loaded into memory.
AllocateStack(int stackID) - Sets the page table but does not load anything into memory
DeallocateStack(int stackID) - Calls DeallocatePage for every page in the page table that is marked as valid
DeallocatePage(int index) - Marks the page as not valid in the page table, and if needed marks it as invalid in IPT and TLB

exception.cc
	ExceptionHandler added case for PageFaultException that calls HandlePageFault.
	Added to Syscall Exception switch statement for new RPC Syscalls

	
	
	

                                                                                                                                                                                                          
V. Testing: 
	+ How to test
		For all of the following tests, first go to the test directory and run “setenv PATH ../gnu/:$PATH” then run “gmake” to compile the user programs. 
		All tests can then be run from the network directory, first run gmake, then follow the instructions below.

To test Parts 1 and 2:
Run the matmult and sort programs. You can run Nachos with the debug flag ‘-d e’ to see the thread Exit status and see the result of the programs. In order to change replacement policy use the flag -P RAND or -P FIFO this needs to be BEFORE the -x flag. For example run them like this:

“nachos -P RAND -x ../test/matmult -rs 350 -d e”

“nachos -P RAND -x ../test/2matmult -rs 350 -d e”

“nachos -P RAND -x ../test/sort -rs 350 -d e”

To test Part 3:
		To test all the RPC calls in part three, there are several user programs that must be run in different instances of nachos (will need multiple terminal windows).
		First, to run the server: compile with gmake in the network directory, and then run ‘nachos -m 0 -server’
	In another terminal run the programs like this:  “nachos -m 1 -x ../test/networklockTest”

	To test Locks: run networklockTest with -m 1, if you run it again it will end because machine 1 already has the lock.
	Then run it again on another machine with -m 2, the second machine will be waiting to acquire the lock since machine 1 already owns it
	
	If we runt networkreleaseTest with -m 1 it will release the lock, allowing machine 2 to acquire it and continue
	To test Conditions:
	run networkconditionTest on multiple machines with -m 1, -m 2 , -m 3 .. -m n etc. who will all wait to be signalled and 
	then run networkbroadcastTest with machine id -m n+1 all the other machines will continue running since they have been signalled. 
	BroadcastRPC calls Signal therefore if it works so does signal, alternatively you can test with networksignalTest -m n+1

	To test monitors: 
	run networkmonitorTest with -m 1 and it will create and set a monitor variable to 420. then run networkgetmonitorTest and it will print out the value of the monitor variable correctly and delete it.

	
	+ Test Output
	To see how memory is being managed. Use the debug flag ‘-d c’ which will list all IPT misses and where pages are being read or written to the disk.
	The RPC tests will print out details of the server side in the server terminal window describes the message being parsed.
	Each client program will print the actions they are doing and any error they receive.

	
VI. Discussion:
	+ Experiment expectation. 
		matmult and 2matmult - expectation is to have matmult exit with status 7220. 2matmult forks two threads that each execute matmult and then exit with status 0. Then each of the matmults exit with status 7220

	+ Experiment result
matmult and 2matmult - result is 7220 with any -rs value for matmult. In 2matmult the main thread exits with status 0, then the forked threads print that they are launching matmult with exit status 0, and then after a short pause for calculation, the exec’d matmults each exit with status 7220.

	+ Explanation
		matmult and 2matmult - pages are moved to the swap file and back into memory without any errors, and does not allow for race conditions so 2 different matmult operations will not ever exchange or modify the other’s data. Therefore each will independently arrive at the result 7220.

	See the above Testing section for testing RPCs.


VIII. Miscellaneous:
		 

